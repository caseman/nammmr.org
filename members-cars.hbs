---
title: Members' Cars
layout: main-layout.hbs
base: ../
---
<div class="jump-links">
    <a href="MMM/"><img src="img/mini-m-type.png" alt=""></a><a href="MMM/">
        Learn More About MMM Cars
    </a>&nbsp;<span class="arrow">&blacktriangleright;</span>
</div>
<div id="member-cars" class="content-padding content-background">
<aside class="wide-only">
    <em>Want to see your car listed here? Send an email to 
    <a href="mailto:casey.duncan+nammmr@gmail.com">Casey Duncan</a>
    with a photo and information. We'd love to have all of our members' cars
    listed!</em>
</aside>
{{#each cars}}
    {{#if-changed type}} <h2 class="divider">{{type}} Type</h2>{{/if-changed}}
    <a class="car" href="members-cars/#{{vin}}" class="plain">
        <img src="thumb/{{vin}}.jpg" alt="{{year}} MG {{model}}" 
             title="click to enlarge">
        <div class="car-info">{{year}} {{model}} {{vin}}</div>
        {{#if description}}<div>{{description}}</div>{{/if}}
        <div>{{owner}}</div>
        <div>{{location}}</div>
    </a>
{{/each}}

    <div id="carousel" aria-modal="true" class="modal">
        <div class="element">
            <a href="{{page.url}}#" class="plain close" aria-label="close" onclick="$('#carousel').hide(200)">&times;</a>
            <a class="plain prev" aria-label="previous"">&lang;</a>
            <a class="plain next" aria-label="next">&rang;</a>
            <div class="caption"></div>
        </div>
    </div>
</div>

<script>
// World's stupidest image carousel
var carArray = [
{{#each cars}}
    {
        id: "#{{vin}}",
        caption: "{{year}} MG {{model}}<br>{{owner}}",
        img: "photos/{{vin}}.jpg",
    },
{{#repeat addt_photos}}
    {
        id: "#{{vin}}-{{@count}}",
        caption: "{{year}} MG {{model}}<br>{{owner}}",
        img: "photos/{{vin}}-{{@count}}.jpg",
    },
{{/repeat}}
{{/each}}
];
var cars = {};
for (var i = 0; i < carArray.length; i++) {
    var c = carArray[i];
    c.index = i;
    cars[c.id] = c;
}

function showCurrentPhoto() {
    showPhoto($('#carousel'), cars[window.location.hash]);
}
window.onhashchange = showCurrentPhoto;

function showPhoto(e, info) {
    if (!info) return;
    var img = e.find('img');
    var caption = e.find('.caption');
    function setCaption() {
        caption && caption.html(info.caption);
    }
    if (img.length) {
        img.on('load', setCaption);
        img.attr('src', info.img);
    } else {
        img = $('<img src="' + info.img + '" alt="">');
        img.on('load', setCaption);
        img.appendTo(e.find('.element'));
        detectSwipe(img[0], function(_, dir) {
            if (dir === 'left') {
                window.location.href =  e.find('a.next').attr('href');
            } else if (dir === 'right') {
                window.location.href =  e.find('a.prev').attr('href');
            }
        });
    }
    e.find('a.next').attr('href', 
        window.location.pathname + (carArray[info.index + 1] || info).id);
    e.find('a.prev').attr('href', 
        window.location.pathname + (carArray[info.index - 1] || info).id);
    e.show(200);
}

function documentReady() {
    showCurrentPhoto();
}

function detectSwipe(element, f) {
    var detect = {
        startX: 0,
        startY: 0,
        endX: 0,
        endY: 0,
        minX: 30,   // min X swipe for horizontal swipe
        maxX: 30,   // max X difference for vertical swipe
        minY: 50,   // min Y swipe for vertial swipe
        maxY: 60    // max Y difference for horizontal swipe
    };

    element.addEventListener('touchstart', function (event) {
        var touch = event.touches[0];
        detect.startX = touch.screenX;
        detect.startY = touch.screenY;
    });

    element.addEventListener('touchmove', function (event) {
        event.preventDefault();
        var touch = event.touches[0];
        detect.endX = touch.screenX;
        detect.endY = touch.screenY;
    });

    element.addEventListener('touchend', function (event) {
        if (
            // Horizontal move.
            (Math.abs(detect.endX - detect.startX) > detect.minX)
                && (Math.abs(detect.endY - detect.startY) < detect.maxY)
        ) {
            f(element, detect.endX > detect.startX ? 'right' : 'left');
        } else if (
            // Vertical move.
            (Math.abs(detect.endY - detect.startY) > detect.minY)
                && (Math.abs(detect.endX - detect.startX) < detect.maxX)
        ) {
            f(element, detect.endY > detect.startY ? 'down' : 'up');
        }
    });
}
</script>
